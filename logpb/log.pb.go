// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log.proto

package logpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogContent struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogContent) Reset()         { *m = LogContent{} }
func (m *LogContent) String() string { return proto.CompactTextString(m) }
func (*LogContent) ProtoMessage()    {}
func (*LogContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{0}
}

func (m *LogContent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogContent.Unmarshal(m, b)
}
func (m *LogContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogContent.Marshal(b, m, deterministic)
}
func (m *LogContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogContent.Merge(m, src)
}
func (m *LogContent) XXX_Size() int {
	return xxx_messageInfo_LogContent.Size(m)
}
func (m *LogContent) XXX_DiscardUnknown() {
	xxx_messageInfo_LogContent.DiscardUnknown(m)
}

var xxx_messageInfo_LogContent proto.InternalMessageInfo

func (m *LogContent) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type LogResponse struct {
	Size                 int64    `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogResponse) Reset()         { *m = LogResponse{} }
func (m *LogResponse) String() string { return proto.CompactTextString(m) }
func (*LogResponse) ProtoMessage()    {}
func (*LogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{1}
}

func (m *LogResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogResponse.Unmarshal(m, b)
}
func (m *LogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogResponse.Marshal(b, m, deterministic)
}
func (m *LogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogResponse.Merge(m, src)
}
func (m *LogResponse) XXX_Size() int {
	return xxx_messageInfo_LogResponse.Size(m)
}
func (m *LogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogResponse proto.InternalMessageInfo

func (m *LogResponse) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

type LogQuery struct {
	LogId                string   `protobuf:"bytes,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
	Date                 string   `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	Seek                 int64    `protobuf:"varint,3,opt,name=seek,proto3" json:"seek,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogQuery) Reset()         { *m = LogQuery{} }
func (m *LogQuery) String() string { return proto.CompactTextString(m) }
func (*LogQuery) ProtoMessage()    {}
func (*LogQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{2}
}

func (m *LogQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogQuery.Unmarshal(m, b)
}
func (m *LogQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogQuery.Marshal(b, m, deterministic)
}
func (m *LogQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogQuery.Merge(m, src)
}
func (m *LogQuery) XXX_Size() int {
	return xxx_messageInfo_LogQuery.Size(m)
}
func (m *LogQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_LogQuery.DiscardUnknown(m)
}

var xxx_messageInfo_LogQuery proto.InternalMessageInfo

func (m *LogQuery) GetLogId() string {
	if m != nil {
		return m.LogId
	}
	return ""
}

func (m *LogQuery) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *LogQuery) GetSeek() int64 {
	if m != nil {
		return m.Seek
	}
	return 0
}

type QueryResponse struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	ReadPos              int64    `protobuf:"varint,2,opt,name=readPos,proto3" json:"readPos,omitempty"`
	RemainBytes          int64    `protobuf:"varint,3,opt,name=remainBytes,proto3" json:"remainBytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryResponse) Reset()         { *m = QueryResponse{} }
func (m *QueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()    {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a153da538f858886, []int{3}
}

func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryResponse.Unmarshal(m, b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
}
func (m *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(m, src)
}
func (m *QueryResponse) XXX_Size() int {
	return xxx_messageInfo_QueryResponse.Size(m)
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

func (m *QueryResponse) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *QueryResponse) GetReadPos() int64 {
	if m != nil {
		return m.ReadPos
	}
	return 0
}

func (m *QueryResponse) GetRemainBytes() int64 {
	if m != nil {
		return m.RemainBytes
	}
	return 0
}

func init() {
	proto.RegisterType((*LogContent)(nil), "logpb.LogContent")
	proto.RegisterType((*LogResponse)(nil), "logpb.LogResponse")
	proto.RegisterType((*LogQuery)(nil), "logpb.LogQuery")
	proto.RegisterType((*QueryResponse)(nil), "logpb.QueryResponse")
}

func init() { proto.RegisterFile("log.proto", fileDescriptor_a153da538f858886) }

var fileDescriptor_a153da538f858886 = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x25, 0x46, 0x63, 0x3b, 0xb5, 0x88, 0x83, 0x42, 0xe8, 0xa9, 0xe6, 0x20, 0x3d, 0x05, 0xb1,
	0x17, 0xcf, 0xe6, 0x54, 0xc8, 0xa1, 0xee, 0x0f, 0x48, 0xda, 0x0c, 0x4b, 0xe8, 0xba, 0x13, 0xb2,
	0x2b, 0x52, 0xbf, 0x5e, 0x76, 0x4c, 0x8c, 0x1e, 0x7a, 0x7b, 0xf3, 0xf6, 0xcd, 0x9b, 0x37, 0xb3,
	0x30, 0x35, 0xac, 0xf3, 0xb6, 0x63, 0xcf, 0x78, 0x61, 0x58, 0xb7, 0xbb, 0xec, 0x01, 0xa0, 0x64,
	0x5d, 0xb0, 0xf5, 0x64, 0x3d, 0xa6, 0x70, 0xb9, 0xff, 0x81, 0x69, 0xb4, 0x8c, 0x56, 0x57, 0x6a,
	0x28, 0xb3, 0x7b, 0x98, 0x95, 0xac, 0x15, 0xb9, 0x96, 0xad, 0x23, 0x44, 0x38, 0x77, 0xcd, 0x17,
	0x89, 0x2a, 0x56, 0x82, 0xb3, 0x0d, 0x4c, 0x4a, 0xd6, 0xaf, 0x1f, 0xd4, 0x1d, 0xf1, 0x0e, 0x12,
	0xc3, 0xfa, 0xad, 0xa9, 0x45, 0x31, 0x55, 0x61, 0xda, 0xa6, 0x0e, 0x6d, 0x75, 0xe5, 0x29, 0x3d,
	0x13, 0x52, 0xb0, 0x58, 0x11, 0x1d, 0xd2, 0xb8, 0xb7, 0x22, 0x3a, 0x64, 0x04, 0x73, 0xf1, 0xf9,
	0x9d, 0x77, 0x32, 0x58, 0x78, 0xe9, 0xa8, 0xaa, 0xb7, 0xec, 0xc4, 0x35, 0x56, 0x43, 0x89, 0x4b,
	0x98, 0x75, 0xf4, 0x5e, 0x35, 0xf6, 0xe5, 0xe8, 0xc9, 0xf5, 0xfe, 0x7f, 0xa9, 0xa7, 0x4f, 0x48,
	0xc2, 0x52, 0xdb, 0x02, 0x9f, 0x61, 0x5e, 0xb0, 0x31, 0xb4, 0xf7, 0x0d, 0xdb, 0x92, 0x35, 0xde,
	0xe4, 0x72, 0x9f, 0x7c, 0x3c, 0xce, 0x02, 0x47, 0x6a, 0xc8, 0xb5, 0x8a, 0x70, 0x0d, 0x13, 0x89,
	0x1a, 0x9a, 0xae, 0x47, 0x85, 0x70, 0x8b, 0xdb, 0x9e, 0xf8, 0xb7, 0xcc, 0x63, 0xb4, 0x4b, 0xe4,
	0x0f, 0xd6, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7e, 0x43, 0xb2, 0x0a, 0x90, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LogRPCClient is the client API for LogRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogRPCClient interface {
	CollectionLog(ctx context.Context, opts ...grpc.CallOption) (LogRPC_CollectionLogClient, error)
	QueryLog(ctx context.Context, in *LogQuery, opts ...grpc.CallOption) (LogRPC_QueryLogClient, error)
}

type logRPCClient struct {
	cc *grpc.ClientConn
}

func NewLogRPCClient(cc *grpc.ClientConn) LogRPCClient {
	return &logRPCClient{cc}
}

func (c *logRPCClient) CollectionLog(ctx context.Context, opts ...grpc.CallOption) (LogRPC_CollectionLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogRPC_serviceDesc.Streams[0], "/logpb.LogRPC/CollectionLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &logRPCCollectionLogClient{stream}
	return x, nil
}

type LogRPC_CollectionLogClient interface {
	Send(*LogContent) error
	CloseAndRecv() (*LogResponse, error)
	grpc.ClientStream
}

type logRPCCollectionLogClient struct {
	grpc.ClientStream
}

func (x *logRPCCollectionLogClient) Send(m *LogContent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logRPCCollectionLogClient) CloseAndRecv() (*LogResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logRPCClient) QueryLog(ctx context.Context, in *LogQuery, opts ...grpc.CallOption) (LogRPC_QueryLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogRPC_serviceDesc.Streams[1], "/logpb.LogRPC/QueryLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &logRPCQueryLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogRPC_QueryLogClient interface {
	Recv() (*QueryResponse, error)
	grpc.ClientStream
}

type logRPCQueryLogClient struct {
	grpc.ClientStream
}

func (x *logRPCQueryLogClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogRPCServer is the server API for LogRPC service.
type LogRPCServer interface {
	CollectionLog(LogRPC_CollectionLogServer) error
	QueryLog(*LogQuery, LogRPC_QueryLogServer) error
}

// UnimplementedLogRPCServer can be embedded to have forward compatible implementations.
type UnimplementedLogRPCServer struct {
}

func (*UnimplementedLogRPCServer) CollectionLog(srv LogRPC_CollectionLogServer) error {
	return status.Errorf(codes.Unimplemented, "method CollectionLog not implemented")
}
func (*UnimplementedLogRPCServer) QueryLog(req *LogQuery, srv LogRPC_QueryLogServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryLog not implemented")
}

func RegisterLogRPCServer(s *grpc.Server, srv LogRPCServer) {
	s.RegisterService(&_LogRPC_serviceDesc, srv)
}

func _LogRPC_CollectionLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogRPCServer).CollectionLog(&logRPCCollectionLogServer{stream})
}

type LogRPC_CollectionLogServer interface {
	SendAndClose(*LogResponse) error
	Recv() (*LogContent, error)
	grpc.ServerStream
}

type logRPCCollectionLogServer struct {
	grpc.ServerStream
}

func (x *logRPCCollectionLogServer) SendAndClose(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logRPCCollectionLogServer) Recv() (*LogContent, error) {
	m := new(LogContent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LogRPC_QueryLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogRPCServer).QueryLog(m, &logRPCQueryLogServer{stream})
}

type LogRPC_QueryLogServer interface {
	Send(*QueryResponse) error
	grpc.ServerStream
}

type logRPCQueryLogServer struct {
	grpc.ServerStream
}

func (x *logRPCQueryLogServer) Send(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _LogRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logpb.LogRPC",
	HandlerType: (*LogRPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CollectionLog",
			Handler:       _LogRPC_CollectionLog_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "QueryLog",
			Handler:       _LogRPC_QueryLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "log.proto",
}
